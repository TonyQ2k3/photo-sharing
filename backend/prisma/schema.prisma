// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  username        String
  passwordHash    String
  profilePicture  String?
  createdAt       DateTime @default(now())

  posts           Post[]
  comments        Comment[]
  likes           Like[]
  followers       Follower[] @relation("UserFollowers")
  following       Follower[] @relation("UserFollowing")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
  tags      PostTag[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  text      String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
  post      Post @relation(fields: [postId], references: [id])
}

model Like {
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
  post      Post @relation(fields: [postId], references: [id])
  @@id([userId, postId])
}

model Follower {
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower    User @relation("UserFollowers", fields: [followerId], references: [id])
  following   User @relation("UserFollowing", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}

model Tag {
  id      Int    @id @default(autoincrement())
  tagName String @unique
  posts   PostTag[]
}

model PostTag {
  postId  Int
  tagId   Int

  post    Post @relation(fields: [postId], references: [id])
  tag     Tag  @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}